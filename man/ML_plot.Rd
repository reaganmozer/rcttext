% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ML_plot.R
\name{ML_plot}
\alias{ML_plot}
\title{Create a Line Plot with Points using ggplot2}
\usage{
ML_plot(
  data = NULL,
  x = NULL,
  y = NULL,
  color = NULL,
  group = NULL,
  ylim_min = NULL,
  ylim_max = NULL,
  x_lable = NULL,
  y_lable = NULL,
  fig_title = NULL,
  legend_title = "",
  legend.position = "bottom"
)
}
\arguments{
\item{data}{A dataframe containing the data to be plotted.}

\item{x}{A string representing the column name for the x-axis.}

\item{y}{A string representing the column name for the y-axis.}

\item{color}{A string representing the column name to be used for coloring the lines and points.}

\item{group}{A string representing the column name to be used for grouping the lines.}

\item{ylim_min}{A numeric value representing the minimum limit for the y-axis.}

\item{ylim_max}{A numeric value representing the maximum limit for the y-axis.}

\item{x_lable}{A string for the label of the x-axis.}

\item{y_lable}{A string for the label of the y-axis.}

\item{fig_title}{A string for the title of the plot.}

\item{legend_title}{A string for the title of the legend.}

\item{legend.position}{A string representing the position of the legend in the plot (default is "bottom").}
}
\value{
A ggplot object representing the created plot.
}
\description{
This function creates a line plot with points using the ggplot2 package. It allows for extensive customization of aesthetics and layout.
}
\examples{
# Load texts
data("toy_reads")

# Generate text features
feats = generate_features( toy_reads$text, meta=toy_reads,
                           sent = TRUE,
                           clean_features = TRUE,
                           read = c("Flesch","Flesch.Kincaid", "ARI"),
                           ld=c("TTR","R","K"),
                           ignore=c("ID"),
                           verbose = TRUE )

# Preprocess the feature space to remove collinear features
# and features with near-zero variance
X_all = dplyr::select( feats,
                       -ID, -Q1, -Q2, -text, -more )
X_all = predict(caret::preProcess( X_all, method = c("nzv","corr"),
                                   uniqueCut=2, cutoff=0.95), X_all )
caret::findLinearCombos(X_all) # sanity check to make sure no redundant features

# Transform all variables as numeric variables
X_all[] <- lapply(X_all,
                  function(x) if(is.character(x)) as.numeric(as.factor(x)) else x)

# Extract outcome variables
all_Scores <- toy_reads$Q1

## Set parameters
X <- X_all
Y <- all_Scores
n_iter <- 2
n_tune <- 2
control <- caret::trainControl(method = 'cv')
preProc <- 'zv'
outcome <- 'continuous'

## Define the percentages for training portions
percentages <- c(.20, 0.40, 0.60, 0.80)

## Loop through each percentage
best_mod <- 'rf'
random_forest_Scores = ML_iterations ( x = X, y = Y,
                                       n_iteration = n_iter,
                                       training_portions = percentages,
                                       trCon = control,
                                       preProc = preProc,
                                       n.tune = n_tune,
                                       model = best_mod,
                                       outcome = outcome )

best_mod <- 'rrf'
regularized_rf_Scores = ML_iterations ( x = X, y = Y,
                                        n_iteration = n_iter,
                                        training_portions = percentages,
                                        trCon = control,
                                        preProc = preProc,
                                        n.tune = n_tune,
                                        model = best_mod,
                                        outcome = outcome )

## Evaluate the metrics
eval_random_forest_Scores = eval_metrics( random_forest_Scores,
                                          outcome = outcome )

eval_regularized_rf_Scores = eval_metrics( regularized_rf_Scores,
                                           outcome = outcome )
## Create data frames for data visualization
all_Scores = rbind( eval_random_forest_Scores,
                    eval_regularized_rf_Scores )


## Create a line plot (Continuous outcomes)
ML_plot( data = all_Scores,
         x = "training", y = "rmse", color = "model", group = "model",
         ylim_min= 0.5, ylim_max= 0.7,
         x_lable = "Training Set (\%)", y_lable = "RMSE",
         fig_title = "RMSE by Training set \% for Different Models",
         legend_title = "", legend.position = "bottom" )

}
